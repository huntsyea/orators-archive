{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer2/source-files'\nimport rehypePrettyCode from \"rehype-pretty-code\";\nimport rehypeSlug from \"rehype-slug\";\nimport remarkGfm from \"remark-gfm\";\n\ninterface DocumentContext {\n  _raw: {\n    sourceFileName: string;\n    sourceFilePath: string;\n    sourceFileDir: string;\n    contentType: string;\n    flattenedPath: string;\n  };\n  body: {\n    raw: string;\n    code: string;\n  };\n}\n\nexport const Speech = defineDocumentType(() => ({\n  name: 'Speech',\n  filePathPattern: `speeches/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    speaker: { type: 'string', required: true },\n    date: { type: 'string', required: true },\n    location: { type: 'string', required: true },\n    category: { \n      type: 'list',\n      of: { type: 'string' },\n      required: true \n    },\n    era: { type: 'string', required: true },\n    tags: { \n      type: 'list',\n      of: { type: 'string' },\n      required: true \n    },\n    relatedSpeeches: {\n      type: 'list',\n      of: {\n        type: 'nested',\n        fields: {\n          slug: { type: 'string' },\n          title: { type: 'string' },\n          speaker: { type: 'string' }\n        }\n      },\n      required: false\n    }\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: (doc: DocumentContext) => doc._raw.sourceFileName.replace(/\\.mdx$/, ''),\n    },\n    headings: {\n      type: 'json',\n      resolve: async (doc: DocumentContext) => {\n        const regXHeader = /#(#{0,5})\\s+(.+)/g;\n        const headings = Array.from(doc.body.raw.matchAll(regXHeader)).map(\n          (match: RegExpMatchArray) => ({\n            level: match[1].length + 1,\n            text: match[2]\n          })\n        );\n        return headings;\n      },\n    },\n  },\n}))\n\nexport default makeSource({\n  contentDirPath: 'content',\n  documentTypes: [Speech],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      rehypeSlug,\n      [\n        rehypePrettyCode,\n        {\n          theme: 'github-dark',\n        },\n      ],\n    ],\n  },\n  disableImportAliasWarning: true,\n}) "],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,sBAAsB;AAC7B,OAAO,gBAAgB;AACvB,OAAO,eAAe;AAgBf,IAAM,SAAS,mBAAmB,OAAO;AAAA,EAC9C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,SAAS,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC1C,MAAM,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACvC,UAAU,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC3C,UAAU;AAAA,MACR,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,MACrB,UAAU;AAAA,IACZ;AAAA,IACA,KAAK,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACtC,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,MACrB,UAAU;AAAA,IACZ;AAAA,IACA,iBAAiB;AAAA,MACf,MAAM;AAAA,MACN,IAAI;AAAA,QACF,MAAM;AAAA,QACN,QAAQ;AAAA,UACN,MAAM,EAAE,MAAM,SAAS;AAAA,UACvB,OAAO,EAAE,MAAM,SAAS;AAAA,UACxB,SAAS,EAAE,MAAM,SAAS;AAAA,QAC5B;AAAA,MACF;AAAA,MACA,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAyB,IAAI,KAAK,eAAe,QAAQ,UAAU,EAAE;AAAA,IACjF;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,SAAS,OAAO,QAAyB;AACvC,cAAM,aAAa;AACnB,cAAM,WAAW,MAAM,KAAK,IAAI,KAAK,IAAI,SAAS,UAAU,CAAC,EAAE;AAAA,UAC7D,CAAC,WAA6B;AAAA,YAC5B,OAAO,MAAM,CAAC,EAAE,SAAS;AAAA,YACzB,MAAM,MAAM,CAAC;AAAA,UACf;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,MAAM;AAAA,EACtB,KAAK;AAAA,IACH,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe;AAAA,MACb;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,OAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,2BAA2B;AAC7B,CAAC;",
  "names": []
}
